part 1
// for each cmd line in file
	// get word count of str
	// alloc str array
	// for each word in str
		// duplicate word in next element in array
			

&& for each process
	&& fork	
	&& if child
		&& wait run
		&& execvp
		&& clean & exit
	&& else
		&& save pid


CREATE A HEADER FILE TO DEFINE THE STRUCTURE OF A PROCESS (OR A PID?)
struct pid
	char* cmd
	char ** args
	int id
	int status
	

&& == OS CMDS
&& alloc proc array
&& determine the command and determine the args for the command

in the parent process, fork returns child process id
in the child process, it returns 0 (so when checking if 0, if it is, you know it's in the child process)

watch out for fork bombs (when it creates processes uncontrolled - can check by clean up after exit

// part2
tell them to wait and run and stuff

// part3
need a status for the PIDS so we use #define to represent states
easy as doing #define NOTRUN = 0 // #define RUNNING = 1 // #define PAUSED = 2 // #define RUN = 3
do it in the header file - the defining stuff

//start timer
//wait for all exit
//stop timers
//cleanup & exit

&& timer signal 
	&& send stop to current process
	&& select next  process to run // no exited child
	&& send process continue

&& child signal handler
	&& get status
	&& if exit


